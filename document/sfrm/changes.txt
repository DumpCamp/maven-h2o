------------------------------------------------------------------------------------------------
-    SFRM (Smart File Reliable Messaging) Plugin Documentation    -
------------------------------------------------------------------------------------------------
Version 2.0.0
------------------------------------------------------------------------------------------------
Date: ?/?/2009

Changes:
Messaging Mechanism Changes:
- Use synchronized way to send the SFRM message segment. Handshaking is the same as before.
- Removed the message type Receipt, which is used for the asynchronized messaging for message segment. 

Removed payload packaging and unpackaging:
- SFRM will no longer pack and unpack a set of payload files before and after the message sending.
  The responsibility for pack and unpack is done in the Doc Processor for SFRM.

- Removed the outgoing-packaged-payload-respository, the payload that indicating ready to send is re-designed
  as [partnership_id]$[message_id][filename].sfrm in the outgoing-payload-repository, while the filename indicating
  the filename which will rename for the received payload. 

Refactored the code structure
- Removed the static variable in the SFRMProcessor, replace the static variable call by extending the SFRMProcessor 
  with PluginProcessor and extending the Component classes by SFRMComponent

Version 1.0.4 (Pre-Release)
------------------------------------------------------------------------------------------------
Date: 21/2/2007

Changes:

ActiveModule Changes:
- Re-implement the OutgoingSegmentPayloadCollector so that for each message, there is at most 2
  DB queries (excluding the polling queries) to process it used in this collector 
  without any system interruption. Those queries is to retrieve the messageDVO and it's partnershipDVO
  which is then cached in the collector.

DAO Changes:
- Introduced DVO Cacher which caches the DVO reducing DB query. 
- Introduced Simple LRU-Based DVO Cacher acting as the first trial.

Session Changes:
- Removed (Use DVO Cacher instead).

Hot Fixed:

070220071029:       
Some log stack trace of Internal connection exception has been discarded because the length of exception 
is too long for the JVM. Also all critical error (InternalServerError, MalFormedURL) has been treated as 
normal exceptions and therefore allow retry during transmission.

070220071444:
More information is logged when when validating whether the message is not processing in the receiver side.

120220071443
Due to possibility of system interruption in the sender side, there is a chance that
the receiver has changed it's message status to UK (un-packaging) but the sender re-sends
some processing & delivered segments as they have not yet received receipt (not yet 
guarantee reliability). This lead to HTTP 412 (Precon) Error as the IMH deemed the message is 
somewhat finished or failure. [FIXED]

Bug Fixed;

070220071549:
a critical error is revealed and leaded to HTTP 412 error each time sending segment.
The bug is reproduced when validating whether the message is processing at the sender side 
when receiving receipt.

Due to long segmentation times for large file, there is time gap that the message status
at the sender is still set to ST but not PR, PS and HS. so the method consider the message 
is not processing and return false. It then throw HTTP 412 which is highly misleading and 
confusing to operator.

090220071040:
The bug is always reproduced when the outgoing segment 
thread task is executing at the receiver side (sending receipt), it checks whether 
the message is failed already by retrieving from the DB. The bugs is came from the 
different message box in segment & message level in receiver side.

For example,

The receipt segment in receiver side has the value "OUTBOX" in the field "message_box".
while the message has the value "INBOX" in the field "message_box".
so the different make the DB call return null and throw NullPointerException.

java.lang.NullPointerException
	at hk.hku.cecid.edi.sfrm.task.OutgoingSegmentPayloadsTask.sendSFRMMessage(OutgoingSegmentPayloadsTask.java:312)
	at hk.hku.cecid.edi.sfrm.task.OutgoingSegmentPayloadsTask.execute(OutgoingSegmentPayloadsTask.java:390)
	at hk.hku.cecid.piazza.commons.module.ActiveThread.run(ActiveThread.java:90)
	at java.lang.Thread.run(Thread.java:534)

Solution: 

The DB calls SHOULD use different message box depend on it's segment type.
For segment PAYLOAD & META , use "OUTBOX" to get the message.
For segment RECEIPT & RECOVERY, use "INBOX" to get the message.

Refactor:
- Pizza Common Ext
	- Added comment to the series of DVOCacher classes.
- SFRM
	- All log content in normal flow have been unity to one standard format <CALLER>: <ACTION> <MSG / SGT INFO> <CONTENT>.
 


Version 1.0.3 (RC2)
------------------------------------------------------------------------------------------------
Changes:

Message Processing Changes:
- Use Mapped File Channel to do on-the-fly joining. This solved the limit of virtual address space in 32-Bits platform
  that the max offset is 2G bytes. call System.gc() afterward.
- Use the session to reduce database query. 
- Added Handshaking process to validate the receiver is capable to receive the message. if not, terminate the whole 
  process immediately to prevent consuming I/O or CPU resources.
- Added Outgoing Message Handler (OMH) to centalize all outgoing message process.
- Added SFRMMessageFactory (SMF) to centalize and encapsule the creation of SFRM Message and abstraction.
- Added all status description in the SFRMConstant. 
- Now only HTTP 200 to 300 (exclusive) response code consider as successfully delivered.
- Added file sending size limit which terminate the sending process when the file size is greater than 4.7GB (default).

ActiveTask Changes:
- added recovery procedures for 
	OutgoingPayloadTask, 
	OutgoingPackagedPayloadTask, 
	OutgoingSegmentPayloadTask,
	IncomingPayloadTask
- OutgoingPackagedPayloadsTask: minor code tuning
- OutgoingSegmentPayloadTask: It has been used a new query from DAO which queries all pending segments which 
  their corresponding message has not been failed.
- OutgoingPayloadTask: Validate there is enough disk space before archiving and handshaking.

Payload Repository Changes:
- Now can force moving / deleting payload.
- Added creation and getting payload from the repository.
- PackagedPayload now support pack / unpack in the terms of using specific archiver.
- FoldersPayload  now support the operation "getSize()" which returns the total size within the folders.

IO Changes:
- Removed hk.hku.cecid.piazza.commons.io.FastZip
- Mapped File Channel does not load into physical memory using hk.hku.cecid.piazza.commons.activation.FileRegionDataSource
- Archiver(s) can now guess how big is the archive from the source folder / files (This method does not invoke any I/O calls).
 
Network Changes:
- Buffered I/O for retreiving the HTTP output stream 
- Added InternalServerErrorException representing all HTTP response code greater than 500.

Security Changes:
- Buffered I/O for loading the trusted certificates. 
- Error loging when unable to load the trusted certificates (FileNotFoundException or IOException).
- Initialize the BouncyCastle engine statically to prevent MD5 / SHA1 algorithm instance can not be initialized during message processing.
- Added JAVA MD5 / SHA1 message digest generation.

Utility Changes:
- Added hk.hku.cecid.piazza.commons.util.StopWatch to calculate a period of times.

Session Changes:
- Added simple caching system for caching message and partnership record.

OS Changes:
- The method modifier "createDummyFile" for linux os is changed to synchronized to prevent 
  process overflow.
- Better dummy file creation has been implemented, at least 100% performance boost.

DAO Changes:
- The message segment DAO has been updated according to DB changes and added queries for 
	OutgoingSegmentPayloadTask,
	OutgoingPackagedPayloadTask.

DB Changes:
- The primary key of message_segment has been changed to (message_id, message_box, segment_type, segment_no).

Bug Fixed:
- The archiverICETAR does not close the tar stream when using list file series method.
- The archiver can't not archive when there is only one file without folders.
- The OSManager does not close the child process when executing command.
- Unable to stop sending outgoing segment when message status changed to "DF".
- Segment retry count wrongly, should be remained 0 instead of 1 if did not perform retry.
- Unable to set message status to ¡¥PS¡¦ at the sender when the message process has been done.
- Input, Ouput and Error stream have not been closed after executing the child process.
- There is no error throwing when the tar is damaged during extraction in the archiverICETAR.
- Does not throw exception when verification error.

Refactor:
- The name of "OutgoingPayloads" has been changed to "FoldersPayload".
- The refactor of IMH is almost done.

Test Case:
- Added Mapped Byte Buffer Test Case.
- Added Common IO Test Case.
- Added MIC Generator Test Case.
- Added Archiver/ArchiverZIP/ArchiverICETAR Test Case.
- Added SFRMSessionManager Test Case.






Version 1.0.2 (RC2-Beta2)
------------------------------------------------------------------------------------------------
Changes:
- The message creation process at the outgoing segment task is now updated to use FileRegionDataSource
  instead of ByteBufferDataSource.
- The file extension of packaged payload is now united to ".sfrm".
- Added "/corvus/httpd/sfrm/inbound" constant which concat it automatically as the sending endpoint.
  So the endpoint field in the partnership only need to fill in the address like "http://localhost:8080/" is 
  enough.
- When the receipt has failed to send, the status of message segment associated to this receipt 
  is set to DF also.
- When the receipt has been sucess to send, the status of message segment associated to this 
  reciept is set to PS.
- Implemented sync reply error handling, reply known HTTP error code when encountering exception at the receiver 
  side.
	- HTTP 403: when the partnership setup is missing or invalid message security setup
	- HTTP 401: when the certificate or the private key in the keystore can't de-crypt and unsign the message
	- HTTP 412: 
	- HTTP 500: when the receiver has not enough hard disk space for receving the segments.
- OutgoingPayloadTask is now supported rollback which attempts to execute certain times again
  when failed to execute.
- Updated sfrm.dao.xml to fit the latest DB schema.


Added:
- A new Activation DataSource called FileRegionDataSource, which make use of the benefits 
  from the Java NIO package, to create a I/O efficient, memory-saved data source for streaming.
	- see hk.hku.cecid.piazza.commons.activation.FileRegionDataSource
- A new Activation DataSource called NullDataSource, which is a dummy data source which discards 
  any read & write operation inside the dats source.
	- see hk.hku.cecid.piazza.commons.activation.NullDataSource
- An OSSelector that finds and initializes the appropriate OSManager quietly.
	- see hk.hku.cecid.piazza.commons.os.OSSelector	
- A new set of classes which handles compression and extraction of popular format archive like ZIP and TAR.
	- see hk.hku.cecid.piazza.commons.io.Archiver
	- see hk.hku.cecid.piazza.commons.io.ArchiverNULL
	- see hk.hku.cecid.piazza.commons.io.ArchiverZIP
	- see hk.hku.cecid.piazza.commons.io.ArchiverICETAR	
- A new set of Constant fields for segment type, message status
	- see hk.hku.cecid.edi.sfrm.pkg.SFRMConstant
- A new set of Payload Status
	- see hk.hku.cecid.edi.sfrm.com.PayloadsState

Bug Fixed:
- The packaged zip file will be deleted in the outgoing segment repository after the message 
  has been processed.
- Fixed methods getXXXCertificates for the SFRMPartnershipDSDVO. The certificates is now located 
  at the directory specified in the SFRMProprties with the name of a particular MD5 fingerprint.
- Fixed methods decode for the XXXXXPayloads which throw exception when decoding invalid payload format.
- Fixed the bugs that the message segment task has been started before the packaged payload move to 
  the segment repository. 
- Fixed the bugs that does not close the file stream for getSize() for the XXXXXPayloads.
- Fixed the bugs that the file segment analyzing fails to retrieve the file size larger than 2GB.

Refactor / Improvement:
- Piazza Common Ext
	- Added / Updated comment to most of the classes.
	- class FastZip is deprecated and replace by ArchiverZIP. The java file will be removed in the future
	  version.
		- see hk.hku.cecid.piazza.commons.io.FastZip
- SFRM ActiveModule
	- Unity the code style for active task set.
	- Remove some of log which is not very useful in debugging.
	- Refactor the code style of logging.
	- IncomingPayloadTask is now inherit ActiveTaskAdaptor and refactored.
	- OutgoingPackagedPayloadTask is now inherit ActiveTaskAdaptor.
	- OutgoingSemgnetPayloadTask  is now inherit ActiveTaskAdaptor
	- OutgoingPayloadTask is now inherit ActiveTaskAdaptor.
- SFRM Message Package
	- Added conversation id field to the message.
	- Added message classifier for fast tracking which the nature of the SFRMMessage.
- SFRM Payload Repository
	- Removed getIncomingPayloadRepository at SFRMProcessor.
	- All XXXXXPayloads constructor has been changed to protected. Instance can be created only 
	  through it's corresponding XXXXPayloadsRepository.
	- Most classes are refactored.
	- Added parameters "archiver" in the packaged payload repository which is the default archiver
        for all packaged payloads.
- SFRM 
	- Removed deprecated fields in the class SFRMProperties, module.core.xml.
	- Refactored SFRMProperties.
	- Reduced complexity (lower coupling) between the sub-system of active task and payload repository sets.
	- The constant set for segment type has been moved to a new class called SFRMConstant, the naming 
	  convention of these constant fields has also been changed to MSGT_XXXX where XXXX is the segment
	  type, and MSGT is the short form of "MESSAGE_TYPE".
	- The constant set for message status has been moved to a new class called SFRMConstant, the naming
	  convention of these constant fields has also been changed to MSGS_XXXX where XXXX is the status 
	  type, and MSGS is the short form of "MESSAGE_STATUS".
	- The constant set for in/outbox has been moved to a new class called SFRMConstant, the naming
	  convention of these constant fields has also been changed to MSGBOX_XXX where XXXX is either 
	  "IN" or "OUT". 
	- The implementation of toString are now used StringBuffer instead of raw String to improve 
	  performance.
	- The naming convention of local variable for DAO class is unified as the follow:
		SFRMMessageSegmentDVO : segDVO
		SFRMPartnershipDVO    : pDVO
		SFRMMessageDVO	    : msgDVO


Test Case:
- Unit Test: OSManager series added.




